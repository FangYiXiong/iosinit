---
layout: post
title: 「从零开始」做一个水果忍者那样的游戏（Scene Kit 基础教程）第 1 节：开始
date: '2016-04-29 03:42:35'
tags:
- 3d-game
---

原文：[Scene Kit Tutorial with Swift Part 1: Getting Started](https://www.raywenderlich.com/128668/scene-kit-tutorial-with-swift-part-1)

> 注：这是[《3D iOS 游戏教程》](https://www.raywenderlich.com/store/3d-ios-games-by-tutorials)这本书中一个章节的缩写版，来让您可以来领略一下这本书的内容。希望您喜欢！

![](http://7xqycx.com1.z0.glb.clouddn.com/2016-04-29-Thumb.gif)

这一教程将向你展示如何使用苹果最新的游戏框架－SceneKit，来创建你的第一个 3D 游戏。

如果在你的想象中，认为 3D 游戏编程要远比 2D 游戏编程复杂的多，这种偏见是可以被谅解的。因为 3D 游戏编程通常涉及许多复杂的数学计算，所有一直有一个名声 —— 就是 TMD 很难。

但是，现在不同了，感谢苹果的 3D 游戏框架－SceneKit！由于 SceneKit 的简单易学，现在即使是初学者也可以在很短的时间内做出一款简洁而又优雅的 3D 游戏了。

在这个一共 5 节的系列教程中，你将会创建你的第一个 SceneKit 游戏：**几何忍者（GeometryFighter）**！这是一个类似于**[水果忍者](https://itunes.apple.com/cn/app/fruit-ninja/id362949845?mt=8)**那样的游戏，你来摧毁不断涌上屏幕的几何体来满足自己内心的破坏欲:]

下面是本系列教程文章的导航及简介：

- [第 1 节](http://iOSinit.com/scenekit-01)，你将会学习到如何新建一个空白的 SceneKit 工程做为一个好的开始。

- [第 2 节](http://iOSinit.com/scenekit-02)，开始编写游戏，并学习有关 SceneKit 节点的知识。

- [第 3 节](http://iOSinit.com/scenekit-03)，学习如何使用 SceneKit 内置的物理引擎来移动你的几何体。

- [第 4 节](http://iOSinit.com/scenekit-04)，学习有关 SceneKit 中有关渲染循环的知识，并让你的几何体不断重生。

- 在最后的[第 5 节](http://iOSinit.com/scenekit-05)中，你将学习如何将一些非常酷的粒子效果添加到游戏中。

让我们开始吧！

在本节中，我们只需要简单地从头创建一个空白的工程做为一个开始，这很适合希望从头开始并理解每一个步骤的同学。如果你更喜欢直接开始写代码，可以跳到系列的[第二节(待更新)](http://iOSinit.com/scenekit-02)，在那里我们为你准备了一个开始程序包。

## 开始

打开 XCode 并在主菜单上选择 **File\New\Project**。如果你想成为（或者看上去）一个 XCode 忍者，也可以使用快捷键：**⇧⌘N**。

在左边选择 **iOS\Application\Game** 这个模版，并点击 **Next** 来继续：

![](http://7xqycx.com1.z0.glb.clouddn.com/2016-04-29-14616520505605.png)

现在你给你的项目配置一些信息。在 Product Name（产品名称） 这一行输入**GeometryFighter**，Language（语言） 这里选择 **Swift**，Game Technology（游戏技术） 选择 **SceneKit**，Devices（设备） 选择 **Universal**，不勾选最后两个复选框，然后单击 **Next**：

![](http://7xqycx.com1.z0.glb.clouddn.com/2016-04-29-s001.png)

最后一步是选择一个方便的地方存储你的项目。选择一个目录，并单击 **Create**；XCode 将施展它的魔法来生成你的项目。

## 创建你的 SceneKit 游戏项目

现在你已经从模版生成了 SceneKit 的游戏工程，你现在应该很想看看运行起来什么样子！:]

首先，在上方的工具栏中，选择 **iPhone 6s** 模拟器，然后点击左边的**播放**按钮（就是一个向右的三角形，我们平时播放音乐和电影时常见的那种）来运行你的程序。XCode 忍者们可以直接按快捷键 **⌘R**：

![](http://7xqycx.com1.z0.glb.clouddn.com/2016-04-29-s02.png)￼

等待一会之后，你的第一个 3D 的 SceneKit 游戏就将出现了，如下图所示。你可以在游戏中旋转你的 3D 宇宙飞船。只需要简单地在屏幕上向不同的方向上拖拽，就可以改变摄像头的角度：

![](http://7xqycx.com1.z0.glb.clouddn.com/2016-04-29-14616538389346.png)￼

哇哦！现在可以休息一会并在你的座位上跳个《小苹果》了，然后我们继续剩下的教程。

## 清空你的游戏程序

现在为了有一个空白的 SceneKit 游戏项目，我们需要把现有的一些文件和代码删除掉。不用担心；你将从头开始一步一步地重新来编写它们，这样你就可以知道这些代码和文件是怎么来的了。

### 删除不必要的文件夹

首先要删除的是 **art.scnassets** 这个文件夹。右键单击它，然后选择 **Delete（删除）**，然后单击 **Move to Trash（扔到回收站）**。

![](http://7xqycx.com1.z0.glb.clouddn.com/2016-04-29-14616541859646.png)￼

> 注：现在不用太担心 **art.scnassets** 这个文件夹的用处。只需要知道是 XCode 的 SceneKit 游戏模版自动为我们生成了它。保持你的工程文件的整洁总是没错的。

## 清理主工程文件

**GameViewController.swift** 是整个游戏的关键文件；我们所有游戏的逻辑代码都将放在这里。在我们开始编程之前，你需要把所有 XCode 自动为我们生成的模版代码都清除掉。

将 **GameViewController.swift** 文件里的内容替换为以下的：

```
import UIKit
import SceneKit
 
class GameViewController: UIViewController {

	override func viewDidLoad() {
    super.viewDidLoad()
  }
 
  override func shouldAutorotate() -> Bool {
    return true
  }
 
  override func prefersStatusBarHidden() -> Bool {
    return true
  }
}
```

旧的代码是用来生成刚刚那个宇宙飞船的；你刚刚做的就是用一个空白的模版替换了它。`shouldAutorotate()` 这个方法控制设备的转屏操作，`prefersStatusBarHidden()` 则用来隐藏顶部的状态栏。

## 设置 SceneKit

`SCNScene` 这个类代表了一个场景；你需要将场景放入一个 `SCNView` 的对象里，这样场景才会展示在屏幕上。所以你接下来的任务就是在项目中创建一个场景以及和它相关的视图。

### 配置视图

将下面这个属性添加到 `GameViewController.swift` 中，，就放在 `viewDidLoad()` 的上面：

```
var scn视图: SCNView!
```

这里，你声明了一个类型为 `SCNView` 的属性用来渲染 `SCNScene` 的内容以供显示。

下一步，在 `prefersStatusBarHidden()` 这个方法的下面新添加这样一个方法：

```
func 配置视图() {
	scn视图 = self.view as! SCNView
}
```

这里，你把 `self.view` 转换成了 `SCNView` 类型并把它存储在了 scn`视图`这个属性里，这样在你之后需要再引用它时，就不需要一遍又一遍地进行这种转换了。注意 `self.view` 这个视图在 `Main.storyboard` 这个文件中已经被配置成了 `SCNView`（所以上述的转换不会出现问题）。

> 注：`SCNView` 在 OS X 系统中是 `NSView` 的子类，在 iOS 中是 `UIView` 的子类。所以无论你是在给 OS X 还是 iOS 编程，同一个 `SCNView` 都会提供给 SCeneKit 所需要的专用视图。

### 配置场景

现在是时候来配置游戏场景了。还是 `GameViewController.swift` 这个文件中，在 `scn视图`属性的下面，再添加这样一个属性：

```
var scn场景 = SCNScene!
```

这里你在游戏里声明了一个类型为 `SCNScene` 的属性。以后你还会在其中添加各种组件，比如灯光、摄像头、几何以及粒子发射器等等。

现在接着`配置视图()`这个方法的后面添加下面的代码：

```
func 配置场景() {
  scn场景 = SCNScene()
  scn视图.scene = scn场景
}
```

这些代码创建了一个空白的 `SCNScene` 对象并将其存储在了 `scn场景` 里；然后把这个空白的场景设置给了 `scn视图` 以备其使用。

### 最后一步

你已经完成了配置场景和视图的两个方法，现在需要在程序初始化的过程中找个合适的时机调用它们。在视图刚刚完成加载的时候调用会是一个不错的时机。

把下面这两行代码加入到 `viewDidLoad()` 中，就放在 `super.viewDidLoad()` 这一行的下面：

```
配置视图()
配置视图()
```

在最后一步里，我们要给游戏添加一个图标。下载本教程的[资源文件](https://github.com/FangYiXiong/GeometryFighterResources/archive/1.0.zip)然后解压缩；你会发现里面有不同尺寸的图标文件供你使用。

要设置游戏的图标，我们需要打开 **Assets.xcassets** 文件夹，选择 **AppIcon** 这一条，然后把 Resources 文件夹中的每一个文件拖拽到相应的位置上。完成后应该跟下图是一样的：

![](http://7xqycx.com1.z0.glb.clouddn.com/2016-04-29-14616582127437.png)￼

运行你的程序，然后在一片漆黑的机遇之门面前颤抖吧！:]

![](http://7xqycx.com1.z0.glb.clouddn.com/2016-04-29-14616584725170.png)￼

说句公道话，这个第一眼看上去可能没那么酷，但是你在这一路上已经完成了：

1. 使用 SceneKit 的游戏模版创建了一个基本的 SceneKit 的游戏工程项目；
2. 学习如何删除掉不必要的文件夹，比如 **art.scnassets**，来清理出一个全新的工程来；
3. 最后，你还学会了如何使用一个空白的场景 `SCNScene` 来初始化视图 `SCNView`。

恭喜你 —— 你现在已经清理好了一个干净的程序来继续学习了！

## 接下来怎么办？

这里是[完成本节后的代码](https://github.com/FangYiXiong/GeometryFighter/archive/part-1-finished.zip)。

就目前而言，您应该继续阅读本系列教程的[第二节](http://iOSinit.com/scenekit-02)，在第二节中，我们开始编写游戏的主体部分，并学习有关 SceneKit 节点有关的知识。

本节视频教程地址（链接待更新）

免费直播教程：[地址](http://www.swiftv.cn/course/inen5bqr)

> 译者注：如果您刚开始学习 iOS 开发，希望系统地学习并得到及时的指导，可以考虑来购买我的视频教程：[「从零开始」学习 3D iOS游戏编程](http://iosinit.com/ios-3d-games/)

> 这一教程基于本文提及的[《3D iOS 游戏教程》](https://www.raywenderlich.com/store/3d-ios-games-by-tutorials)这本书，将会教给你制作 3D iOS 游戏中所需要知道的一切知识，在这个过程中你将从头开始制作一系列类似于[水果忍者]((https://itunes.apple.com/cn/app/fruit-ninja/id362949845?mt=8))、经典的敲砖块，甚至苹果 WWDC 上和 Apple TV 一起首发的游戏 —— [Crossy Road](https://itunes.apple.com/us/app/crossy-road-endless-arcade/id924373886?mt=8)。

> 于此同时，如果您有任何问题，欢迎在微博上 [@方一雄](http://weibo.com/fangyixiong) 给我留言或私信。