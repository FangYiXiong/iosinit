---
layout: post
title: 「从零开始」做一个 FlappyBird 那样的游戏 第6节：检测物体的碰撞
date: '2016-03-02 07:19:30'
---


原文地址：[「从零开始」做一个 FlappyBird 那样的游戏 第6节：检测物体的碰撞](http://iOSinit.com/flappybird-06)

相关视频地址：[网易云课堂](http://study.163.com/course/introduction/1685005.htm)

嗨，大家好，我是方一雄。欢迎大家继续收看[「从零开始」做一个 FlappyBird 那样的游戏](http://study.163.com/course/introduction/1685005.htm) 这一系列教学视频。

在本节的视频中，你将会学习如何检测游戏中物体的碰撞。

## 理论讲解

----

### 碰撞检测

在上节课的视频中，我们已经完成了实现「碰撞检测」的准备工作，那就是给主角、障碍物和地面增加了碰撞体积。现在我们要做的就是告诉系统的物理引擎，当两个物品碰撞的时候，通知我们。这种通知机制在苹果的编程语言中，就叫做**代理（Delegate）**。

那为了实现这个代理，我们首先要遵守一个名叫`SKPhysicsContactDelegate`（意思就是系统物理引擎碰撞的代理）的**协议（Protocol）**。然后我们把游戏的`场景`本身设置为物理世界(`PhysicsWorld`)的代理，这样我们就会在系统的物理引擎检测到碰撞后得到通知。

由于这个课程的目的不是专注于编程知识的讲解，所以如果你不理解这个所谓的「代理」和「协议」是什么，可以暂时先放下，跟着做下来，之后再去查找相关的概念。

这个通知就是我们屏幕上列出来的这个方法，名字叫做`didBeginContact`，意思就是开始碰撞。

```
func didBeginContact(碰撞双方: SKPhysicsContact) {
   
   let 被撞对象 = 碰撞双方.bodyA.categoryBitMask == 物理层.游戏角色 ? 碰撞双方.bodyB : 碰撞双方.bodyA
   
   if 被撞对象.categoryBitMask == 物理层.地面 {
       撞击了地面 = true
   }
   
   if 被撞对象.categoryBitMask == 物理层.障碍物 {
       撞击了障碍物 = true
   }
   
}
```

我们注意到，这个方法中有一个类为`SKPhysicsContact`的参数，我们叫它`碰撞双方`，它有两个属性`bodyA`和`bodyB`分别代表发生碰撞的两个物体。

这里有一个棘手的问题是，这里的顺序是不固定的。也就是说，当主角和障碍物发生碰撞的时候，`bodyA`可能是`主角`，也可能是`障碍物`。主角和地面相撞的时候也是同样的情况。

所以第一行代码的意思就是我们要区分主角和它撞到的东西。那因为我们的游戏设计成，要么是主角撞到障碍物，要么是主角撞到地面。所以碰撞的双方中一定有一个是`主角`。

所以如果`bodyA`的类别是`游戏角色`，那它一定是主角，那么`被撞对象`一定是`bodyB`；反之，那么`bodyB`就是主角，那么`bodyA`就是`被撞对象`。

区分完`主角`和`被撞对象`之后，我们知道了`被撞对象`要不就是`障碍物`，要不就是`地面`。所以接下来的代码就是要再来分别处理`撞到障碍物`和`撞到地面`这两种情况了。在这里，我们的做法是分别设置一个布尔值的变量作为标记来代表这两种情况。然后在「游戏更新下一帧」（即`update`那个方法）的时候根据不同的情况来做一些相关的事情。

### 游戏状态

#### 不同的游戏状态：

在我们进入 Demo 之前还有一件事需要大家理解，那就是「游戏状态」。

我们在编写游戏的时候，通常会把游戏分为不同的状态。截至目前，我们只有一个状态，那就是`游戏`状态，在这个状态下，我们的主角在天空不断地飞翔。

那如果我们的主角撞上障碍物之后应该怎么办呢？

- 游戏中
- 跌落
- 显示分数

这个时候我们就要切换到一个新的游戏状态，这时主角就会向下坠落，这个状态就叫`跌落`。然后当主角落到地面上的时候，我们要再切换一个状态来给玩家显示本次游戏的得分，之后会教大家如何计分，我们这里就先把这个状态叫做`显示分数`。

现在的问题是，我们要如何来跟踪这些不同的状态呢？

你可以会想，我可以设置几个布尔值来进行标记，是否跌落，是否撞击了地面等等。这没错，但是因为在之后我们可能还会增加更多的游戏状态，所以使用一个枚举来管理可能是一个更好的方法。

就像这个代码显示的一样，我们把所有可能的游戏状态都列举出来，包括一些我们暂时还用不上的状态。 


```
enum 游戏状态 {
    case 主菜单
    case 教程
    case 游戏
    case 跌落
    case 显示分数
    case 结束
}
```

#### 对于每一个状态

确定了各个游戏状态之后，我们可以根据不同的游戏状态来组织和优化我们的代码。

##### 点击屏幕时候有不同的行为

比如，当用户点击屏幕的时候，如果我们是在「游戏」状态，那跟之前一样，主角要`向上飞一下`，但是如果是在「跌落」的状态下，用户再点击屏幕我们就不希望主角再飞了，而是让用户静静地看着主角下落的动画就好了。

##### 游戏每一帧更新的时候发生不同的事情

比如，在`update`（更新）这个方法中，如果是在「游戏」状态，那就跟之前一毛一样；但是如果是在「跌落」的状态下，我们就不希望前景和障碍物再持续地移动来制造主角向前飞的假象了对吧，因为这时理论上主角已经「死」了，不能前进了。

综上可以看到，根据不同的游戏状态来组织我们的代码是很有帮助的。

##### 在不同游戏状态间切换的特效

这样做的另外一个好处在于，当我们在不同的游戏状态间切换的时候，我们可以创建一个「切换到xx状态」的方法来组织我们的代码，逻辑会更清晰。

比如，当我们的主角撞到障碍物的时候，我们要切换到「跌落」的状态，那我们就可以写一个名叫`切换到跌落状态()`这样的方法，在这个方法里，我们首先把当前游戏状态改为「跌落」，然后我们可能想播放一个跌落的声音来告诉玩家发生了什么，那我们就可以把这个切换相关的代码都写在下面。

用这种方式组织代码逻辑会非常清晰，既方便阅读也更易于日后的维护，在我们的示范中就会采用这种方式。

## Demo 演示

图文 TODO，请先参考相关视频（）